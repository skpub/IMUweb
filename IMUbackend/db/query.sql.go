// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO student (id, name, email, password, since) VALUES ($1, $2, $3, $4, NOW()) RETURNING id
`

type CreateStudentParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

// student CRUD
// student C
func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createStudent,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM student WHERE id = $1
`

// student D
func (q *Queries) DeleteStudent(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteStudent, id)
	return err
}

const findStudentByEmail = `-- name: FindStudentByEmail :one
SELECT id, name, bio, since, email, password FROM student WHERE email = $1
`

func (q *Queries) FindStudentByEmail(ctx context.Context, email string) (Student, error) {
	row := q.db.QueryRowContext(ctx, findStudentByEmail, email)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Since,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const findStudentByID = `-- name: FindStudentByID :one
SELECT id, name, bio, since, email, password FROM student WHERE id = $1
`

// student R
func (q *Queries) FindStudentByID(ctx context.Context, id string) (Student, error) {
	row := q.db.QueryRowContext(ctx, findStudentByID, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Since,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const login = `-- name: Login :exec
SELECT count(*) FROM student WHERE id = $1 AND password = $2
`

type LoginParams struct {
	ID       string `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) Login(ctx context.Context, arg LoginParams) error {
	_, err := q.db.ExecContext(ctx, login, arg.ID, arg.Password)
	return err
}

const updateStudentBio = `-- name: UpdateStudentBio :exec
UPDATE student SET bio = $2 WHERE id = $1
`

type UpdateStudentBioParams struct {
	ID  string         `json:"id"`
	Bio sql.NullString `json:"bio"`
}

func (q *Queries) UpdateStudentBio(ctx context.Context, arg UpdateStudentBioParams) error {
	_, err := q.db.ExecContext(ctx, updateStudentBio, arg.ID, arg.Bio)
	return err
}

const updateStudentName = `-- name: UpdateStudentName :exec
UPDATE student SET name = $2 WHERE id = $1
`

type UpdateStudentNameParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// student U
func (q *Queries) UpdateStudentName(ctx context.Context, arg UpdateStudentNameParams) error {
	_, err := q.db.ExecContext(ctx, updateStudentName, arg.ID, arg.Name)
	return err
}
