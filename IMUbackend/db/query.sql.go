// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, email, password, since) VALUES ($1, $2, $3, $4, NOW()) RETURNING id
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

// USERS CRUD
// USERS C
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

// USERS D
func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, name, bio, since, email, password FROM users WHERE email = $1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Since,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, name, bio, since, email, password FROM users WHERE id = $1
`

// USERS R
func (q *Queries) FindUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Since,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const login = `-- name: Login :exec
SELECT count(*) FROM users WHERE id = $1 AND password = $2
`

type LoginParams struct {
	ID       string `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) Login(ctx context.Context, arg LoginParams) error {
	_, err := q.db.ExecContext(ctx, login, arg.ID, arg.Password)
	return err
}

const updateUserBio = `-- name: UpdateUserBio :exec
UPDATE users SET bio = $2 WHERE id = $1
`

type UpdateUserBioParams struct {
	ID  string         `json:"id"`
	Bio sql.NullString `json:"bio"`
}

func (q *Queries) UpdateUserBio(ctx context.Context, arg UpdateUserBioParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBio, arg.ID, arg.Bio)
	return err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE users SET name = $2 WHERE id = $1
`

type UpdateUserNameParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// USERS U
func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.ExecContext(ctx, updateUserName, arg.ID, arg.Name)
	return err
}
