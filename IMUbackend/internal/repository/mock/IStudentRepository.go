// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	db "IMUbackend/db"
	context "context"

	mock "github.com/stretchr/testify/mock"

	repository "IMUbackend/internal/repository"
)

// IStudentRepository is an autogenerated mock type for the IStudentRepository type
type IStudentRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *IStudentRepository) Create(ctx context.Context, user db.CreateStudentParams) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateStudentParams) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateStudentParams) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateStudentParams) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *IStudentRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *IStudentRepository) FindByID(ctx context.Context, id string) (db.Student, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 db.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.Student, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Student); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Student)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx
func (_m *IStudentRepository) GetProfile(ctx context.Context) (repository.StudentProfile, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 repository.StudentProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (repository.StudentProfile, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) repository.StudentProfile); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(repository.StudentProfile)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfiles provides a mock function with given fields: ctx
func (_m *IStudentRepository) GetProfiles(ctx context.Context) ([]*repository.StudentProfile, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProfiles")
	}

	var r0 []*repository.StudentProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*repository.StudentProfile, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*repository.StudentProfile); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.StudentProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, id, password
func (_m *IStudentRepository) Login(ctx context.Context, id string, password string) error {
	ret := _m.Called(ctx, id, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBio provides a mock function with given fields: ctx, id, bio
func (_m *IStudentRepository) UpdateBio(ctx context.Context, id string, bio string) error {
	ret := _m.Called(ctx, id, bio)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBio")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, bio)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateImg provides a mock function with given fields: ctx, id, img
func (_m *IStudentRepository) UpdateImg(ctx context.Context, id string, img []byte) error {
	ret := _m.Called(ctx, id, img)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, id, img)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIStudentRepository creates a new instance of IStudentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIStudentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IStudentRepository {
	mock := &IStudentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
