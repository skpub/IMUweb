// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	domain "IMUbackend/internal/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IArticleRepository is an autogenerated mock type for the IArticleRepository type
type IArticleRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, student, imgs, md
func (_m *IArticleRepository) Create(ctx context.Context, student string, imgs []*domain.NamedContent, md domain.Markdown) (uuid.UUID, error) {
	ret := _m.Called(ctx, student, imgs, md)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*domain.NamedContent, domain.Markdown) (uuid.UUID, error)); ok {
		return rf(ctx, student, imgs, md)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []*domain.NamedContent, domain.Markdown) uuid.UUID); ok {
		r0 = rf(ctx, student, imgs, md)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []*domain.NamedContent, domain.Markdown) error); ok {
		r1 = rf(ctx, student, imgs, md)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *IArticleRepository) FindByID(ctx context.Context, id uuid.UUID) (*domain.Article, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Article, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Article); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields: ctx
func (_m *IArticleRepository) ListAll(ctx context.Context) ([]uuid.UUID, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]uuid.UUID, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []uuid.UUID); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIArticleRepository creates a new instance of IArticleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIArticleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IArticleRepository {
	mock := &IArticleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
