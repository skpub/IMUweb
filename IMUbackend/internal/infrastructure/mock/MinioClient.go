// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	io "io"

	minio "github.com/minio/minio-go/v7"

	mock "github.com/stretchr/testify/mock"
)

// MinioClient is an autogenerated mock type for the MinioClient type
type MinioClient struct {
	mock.Mock
}

// GetObject provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MinioClient) GetObject(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions) (*minio.Object, error) {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 *minio.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) (*minio.Object, error)); ok {
		return rf(ctx, bucketName, objectName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) *minio.Object); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minio.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.GetObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObject provides a mock function with given fields: ctx, bucketName, objectName, reader, objectSize, opts
func (_m *MinioClient) PutObject(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions) (minio.UploadInfo, error) {
	ret := _m.Called(ctx, bucketName, objectName, reader, objectSize, opts)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 minio.UploadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) (minio.UploadInfo, error)); ok {
		return rf(ctx, bucketName, objectName, reader, objectSize, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) minio.UploadInfo); ok {
		r0 = rf(ctx, bucketName, objectName, reader, objectSize, opts)
	} else {
		r0 = ret.Get(0).(minio.UploadInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, reader, objectSize, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveObject provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MinioClient) RemoveObject(ctx context.Context, bucketName string, objectName string, opts minio.RemoveObjectOptions) error {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	if len(ret) == 0 {
		panic("no return value specified for RemoveObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.RemoveObjectOptions) error); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMinioClient creates a new instance of MinioClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMinioClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MinioClient {
	mock := &MinioClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
