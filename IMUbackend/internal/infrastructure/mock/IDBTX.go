// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	db "IMUbackend/db"
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// IDBTX is an autogenerated mock type for the IDBTX type
type IDBTX struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx, ops
func (_m *IDBTX) BeginTx(ctx context.Context, ops *sql.TxOptions) (*sql.Tx, error) {
	ret := _m.Called(ctx, ops)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) (*sql.Tx, error)); ok {
		return rf(ctx, ops)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) *sql.Tx); ok {
		r0 = rf(ctx, ops)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = rf(ctx, ops)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields: tx
func (_m *IDBTX) Commit(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDBTX provides a mock function with no fields
func (_m *IDBTX) GetDBTX() db.DBTX {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDBTX")
	}

	var r0 db.DBTX
	if rf, ok := ret.Get(0).(func() db.DBTX); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.DBTX)
		}
	}

	return r0
}

// Rollback provides a mock function with given fields: tx
func (_m *IDBTX) Rollback(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIDBTX creates a new instance of IDBTX. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDBTX(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDBTX {
	mock := &IDBTX{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
